name: OS/2 (i386)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    name: os2-i386
    env:
      SEZERO_SDL_COMMIT: 437c44d7017248fa799bb44b60d0fc8ced2f714e
      UTF8PROC_VERSION: 2.10.0
      UTF8PROC_SHA256: 276a37dc4d1dd24d7896826a579f4439d1e5fe33603add786bb083cab802e23e
      OPENWATCOM_VERSION: 2025-02-02
      OPENWATCOM_SHA256: ee613f1ecd11b72de554a7d92236c4893c5edb1d80484656c152d720698beea8
      
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          path: schism

        # MSYS2 provides POSIX shell stuff
      - name: 'Setup MSYS2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          update: true
          install: git mingw-w64-i686-toolchain libtool autoconf automake make zip unzip dos2unix patch p7zip
          location: 'C:\\msys2'

      - name: 'Retrieve runner temp directory'
        id: temp
        run: |
          cd schism
          echo "temp=$(cygpath -u "$RUNNER_TEMP")" >> $GITHUB_OUTPUT
          echo "wpath=$RUNNER_TEMP" >> $GITHUB_OUTPUT
          cd ..

        # FIXME store this in RUNNER_TEMP instead
      - name: 'Cache OpenWatcom'
        id: cache-openwatcom
        uses: actions/cache@v4
        with:
          path: 'C:\\WATCOM'
          key: os2-cache-openwatcom

      - name: 'Cache dependencies'
        id: cache-i386-dependencies
        uses: actions/cache@v4
        with:
          path: '${{ steps.temp.outputs.wpath }}\\i386prefix'
          key: os2-i386-dependencies-SEZEROSDL2_${{ env.SEZERO_SDL_COMMIT }}-UTF8PROC_${{ env.UTF8PROC_VERSION }}

        # Grab OpenWatcom V2
      - name: 'Setup OpenWatcom'
        if: steps.cache-openwatcom.outputs.cache-hit != 'true'
        run: |
          wget -O openwatcom-install.exe "https://github.com/open-watcom/open-watcom-v2/releases/download/2025-02-02-Build/open-watcom-2_0-c-win-x86.exe"
          echo "$OPENWATCOM_SHA256  openwatcom-install.exe" | sha256sum -c -
          7z x openwatcom-install.exe -o"/c/WATCOM"

      - name: "Download sezero's SDL repo"
        env:
          RUNNER_TEMP_CYGPATH: ${{ steps.temp.outputs.temp }}
        run: |
          wget -O "sezero.tar.gz" "https://github.com/sezero/SDL2-OS2/archive/$SEZERO_SDL_COMMIT.tar.gz"
          tar xvf "sezero.tar.gz"
          mv "SDL2-OS2-$SEZERO_SDL_COMMIT" "$RUNNER_TEMP_CYGPATH/i386prefix"
          rm "sezero.tar.gz"

        # Luckily we only really need to build UTF8PROC for OS/2 because
        # everything else is provided by sezero's builds of SDL.
      - name: 'Download utf8proc'
        if: steps.cache-i386-dependencies.outputs.cache-hit != 'true'
        run: |
          wget -O "utf8proc-$UTF8PROC_VERSION.tar.gz" "https://github.com/JuliaStrings/utf8proc/releases/download/v$UTF8PROC_VERSION/utf8proc-$UTF8PROC_VERSION.tar.gz"
          echo "$UTF8PROC_SHA256  utf8proc-$UTF8PROC_VERSION.tar.gz" | sha256sum -c -
          tar xvf "utf8proc-$UTF8PROC_VERSION.tar.gz"

      - name: 'Build utf8proc'
        if: steps.cache-i386-dependencies.outputs.cache-hit != 'true'
        env:
          RUNNER_TEMP_CYGPATH: ${{ steps.temp.outputs.temp }}
        run: |
          export PATH="/c/WATCOM/binnt:$PATH"
          export WATCOM="C:\\WATCOM"
          cd utf8proc-$UTF8PROC_VERSION
          owcc -I"/c/WATCOM/h" -za99 -c -o utf8proc.obj utf8proc.c
          wlib -n utf8proc.lib utf8proc.obj
          cp "utf8proc.lib" "$RUNNER_TEMP_CYGPATH/i386prefix/lib"
          cp "utf8proc.h" "$RUNNER_TEMP_CYGPATH/i386prefix/h"
          cd ..
        
      - name: 'Get date of latest commit'
        id: date
        run: |
          cd schism
          echo "date=$(git log -n 1 --date=short --format=format:%cd | sed 's/\(....\)-\(..\)-\(..\).*/\1\2\3/')" >> $GITHUB_OUTPUT
          cd ..

      - name: 'autoreconf'
        run: |
          cd schism
          autoreconf -i
          cd ..

      - name: 'Compile package'
        env:
          RUNNER_TEMP_CYGPATH: ${{ steps.temp.outputs.temp }}
        run: |
          export PATH="/c/WATCOM/binnt:$PATH"
          export WATCOM="C:\\WATCOM"
          cd schism
          mkdir build
          cd build
          # We link to SDL 1.2 here since it's universally supported by everything and is
          # useful as a fallback of sorts.
          ../configure 'CPP=owcc -E' 'CPPFLAGS=-I/c/WATCOM/h -I/c/WATCOM/h/os2 -b OS2V2_PM' CC=owcc 'CFLAGS=-b OS2V2_PM -O2 -za99 -fno-short-enum -march=i386 -mthreads' 'LDFLAGS=-b OS2V2_PM' --host=i386-pc-os2 OBJEXT=obj EXEEXT=exe --without-jack --with-sdl2 --enable-sdl2-linking PKG_CONFIG=false SDL2_CFLAGS="-I$RUNNER_TEMP_CYGPATH/i386prefix/h/SDL2" SDL2_LIBS="$RUNNER_TEMP_CYGPATH/i386prefix/lib/SDL2.lib" UTF8PROC_CFLAGS="-I$RUNNER_TEMP_CYGPATH/i386prefix/h" UTF8PROC_LIBS="$RUNNER_TEMP_CYGPATH/i386prefix/lib/utf8proc.lib"
          make
          wstrip schismtracker.exe
          cp schismtracker.exe ../..
          cd ../..

      - name: 'Create package'
        env:
          RUNNER_TEMP_CYGPATH: ${{ steps.temp.outputs.temp }}
        run: |
          cp "$RUNNER_TEMP_CYGPATH/i386prefix/dll/SDL2.dll" .
          cp schism/docs/configuration.md schism/README.md schism/COPYING .
          cp schism/icons/schism-icon-os2.ico schismtracker.ico
          wget https://raw.githubusercontent.com/xiph/flac/master/COPYING.Xiph
          unix2dos COPYING.Xiph COPYING README.md configuration.md

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: schismtracker-${{ steps.date.outputs.date }}-os2
          path: |
            schismtracker.exe
            schismtracker.ico
            SDL2.dll
            COPYING
            COPYING.Xiph
            README.md
            configuration.md
